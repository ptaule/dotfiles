set nocompatible " be iMproved, required
filetype off     " required

set rtp+=/scratch/.vim

" Specify a directory for plugins (for Neovim: ~/.local/share/nvim/plugged)
call plug#begin('/scratch/.vim/plugged')
Plug 'SirVer/ultisnips'
Plug 'Shougo/deoplete.nvim'
Plug 'neomake/neomake'
Plug 'vim-airline/vim-airline'
Plug 'godlygeek/tabular'
Plug 'sheerun/vim-polyglot'
Plug 'Raimondi/delimitMate'
Plug 'JuliaEditorSupport/julia-vim'
Plug 'rsmenon/vim-mathematica'
Plug 'lervag/vimtex'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-unimpaired'
Plug 'ntpeters/vim-better-whitespace'

" Initialize plugin system
call plug#end()

filetype plugin indent on
syntax on

colorscheme default

" History/Undo settings
set history=1000
set undofile
set undodir=/scratch/.vim/undo
set undolevels=1000 " How many undos
set undoreload=1000 " Number of lines to save for undo
set backupdir=/scratch/.vim/backup/
set directory=/scratch/.vim/backup/

set lazyredraw
set hidden

set wildmenu
set wildignorecase
set wildignore+=*.acn,*.acr,*.alg,*.aux,*.auxlock,*.bbl,
set wildignore+=*.bcf,*.blg,*.fdb_latexmk,*.fls*.glo,
set wildignore+=*.idn,*.idx,*.ilg,*.nlo,*.nls*.out,*.toc,
set wildignore+=*.pdf,*.png,*.jpeg

set number
set relativenumber
set scrolloff=3
set ignorecase
set smartcase
set hlsearch
set incsearch
set gdefault

set tabstop=4
set shiftwidth=4
set expandtab
set smarttab
set backspace=indent,eol,start

set nrformats-=octal

" set clipboard=unnamed
set shortmess=a
set cmdheight=1

" Typos
ab heigth height
ab lenght length
ab widht width
ab teh the
ab fro for
autocmd filetype cpp ab enld endl
autocmd filetype tex ab farc frac

let mapleader = ","
let g:mapleader = ","

let g:tex_flavor = "latex"

"Escape
inoremap jk <Esc>
noremap <silent> <Space> :silent noh<Bar>echo<CR>
nnoremap <CR> o<Esc>
nnoremap <leader><leader> :wa<CR>

autocmd filetype tex nnoremap j gj
autocmd filetype tex nnoremap k gk

autocmd filetype cpp    inoremap {<CR> {<CR>}<Esc>O
autocmd filetype c      let @d='ywoprintf("jkpa = %i\n", jkpa);jkk^'
autocmd filetype cpp    let @d='ywostd::cout << "jkpa= jkA << jkpjkA<< std::endl;jkk^'
autocmd filetype julia  let @p='ywoprintln("jkpa = $jkpa")jkk^'
autocmd filetype py     let @d='ywoprint ("jkpa= "jkA,jkpjkA)jkk0'
autocmd filetype dat    let @q='18ddj'
autocmd filetype dat    let @e='R000000e+01jkjA€kb50jk'
autocmd filetype cpp    nnoremap <leader>m :wa<CR> :!make run<CR>
autocmd filetype c      nnoremap <leader>m :wa<CR> :!make run<CR>
autocmd filetype julia  nnoremap <leader>m :wa<CR> :!nice julia % <CR>
autocmd filetype sh     nnoremap <leader>m :wa<CR> :!./% <CR>
autocmd filetype dosini nnoremap <leader>m :wa<CR> :!./class % <CR>
autocmd filetype mma    nnoremap <leader>m :wa<CR> :!math -run -noprompt < % <CR>

autocmd filetype dat :set nostartofline

"Vertical split
nnoremap <leader>w <C-w>v<C-w>l
"Horizontal split
"nnoremap <leader>h <C-w>s<C-w>l
nnoremap <leader>q <C-w>q
nnoremap <leader>h <C-w>h
nnoremap <leader>j <C-w>j
nnoremap <leader>k <C-w>k
nnoremap <leader>l <C-w>l

" Copy to end of line
nnoremap Y y$

" Copy to clipboard
nnoremap <leader>y  "+y
nnoremap <leader>yy  "+yy
vnoremap <leader>y  "+y

" Paste from clipboard
nnoremap <leader>p "+p
nnoremap <leader>P "+P
vnoremap <leader>p "+p
vnoremap <leader>P "+P

"source $MYVIMRC reloads the saved $MYVIMRC
nnoremap <Leader>s :source $MYVIMRC<CR>
"opens $MYVIMRC for editing, or use :tabedit $MYVIMRC
nnoremap <Leader>v :e /scratch/.vimrc<CR>

vnoremap <leader>t :Tabularize /
" Search for visual selected text
vnoremap // y/<C-R>"<CR>

" Execute command on this line in shell
nnoremap Q !!sh<CR>

" Change working directory to this
nnoremap <leader>cd :cd %:p:h<CR>
cmap :Q :q

let g:deoplete#enable_at_startup = 1

autocmd FileType tex let b:delimitMate_quotes = "\" ' $"

autocmd FileType julia,gnuplot,dat,dosini setlocal commentstring=#\ %s
autocmd FileType form setlocal commentstring=*\ %s

let g:polyglot_disabled = ['latex']

" Syntax for .dat files
autocmd BufRead,BufNewFile *.dat set filetype=dat

" Neomake settings
autocmd! BufWritePost *.c,*.h,*.cpp,*.hpp Neomake
autocmd! BufReadPost *.c,*.h,*.cpp,*.hpp Neomake
let g:neomake_c_enabled_makers = ['gcc']
let g:c_syntax_for_h=1
let g:neomake_gcc_args = [
            \ '-Wall',
            \ '-Wextra',
            \ '-Wpedantic',
            \ '-Wno-sign-conversion',
            \ '-fsyntax-only',
            \ '-I/scratch/gsl-2.5/',
            \ '-I/scratch/Cuba-4.2/'
            \ ]

" vim-airline settings
set laststatus=2
" let g:airline_powerline_fonts = 1

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

let g:airline_left_sep = 'î‚°'
let g:airline_left_alt_sep = 'î‚±'
let g:airline_right_sep = 'î‚²'
let g:airline_right_alt_sep = 'î‚³'
let g:airline_symbols.branch = 'î‚ '
let g:airline_symbols.readonly = 'î‚¢'
let g:airline_symbols.linenr = 'î‚¡'

let g:airline#extensions#csv#enabled = 0

" Ultisnips settings
" let g:UltiSnipsUsePythonVersion = 3
let g:UltiSnipsSnippetsDir="/scratch/.vim/UltiSnips"
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsEditSplit="vertical"
